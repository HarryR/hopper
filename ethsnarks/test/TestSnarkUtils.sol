pragma solidity ^0.4.24;

import "truffle/Assert.sol";
import "../contracts/SnarkUtils.sol";

contract TestSnarkUtils
{
	function testReverseBits()
		public
	{
		uint256 x = 0xD294F6E585874FE640BE4CE636E6EF9E3ADC27620AA3221FDCF5C0A7C11C6F67;
		uint256 y = 0xe6f63883e503af3bf844c55046e43b5c79f7676c67327d0267f2e1a1a76f294b;
		uint256 z = SnarkUtils.ReverseBits(x);

		Assert.equal(z, y, "Reverse bits failed!");
		Assert.equal(SnarkUtils.ReverseBits(z), x, "Double reverse bits failed!");
	}

	function _fillInputs( bytes32 in_what, uint256[] memory out_what )
		internal pure
	{
		uint i;
		for( i = 0; i < out_what.length; i++ )
		{
			out_what[i] = uint256(in_what);
		}
	}

	function _testOutputs( uint256[] outputs, uint256[] expected_outputs )
		internal
	{
		uint i;
		for( i = 0; i < expected_outputs.length; i++ )
		{
			Assert.equal(outputs[i], expected_outputs[i], "Output word mismatch");
		}
	}

	/**
	* Pack a single 256 bit word into two outputs
	*/
	function testPackWords256()
		public
	{
		uint256[] memory input_words = new uint256[](1);
		uint256[] memory output_words = new uint256[](2);

		input_words[0] = 0xD294F6E585874FE640BE4CE636E6EF9E3ADC27620AA3221FDCF5C0A7C11C6F67;

		SnarkUtils.PackWords(input_words, output_words);

		Assert.equal(output_words[0], 3148911523101545054735209199478325155464765444384556179543606818372573931851, "Output word 0 mismatch");

		Assert.equal(output_words[1], 7, "Output word 1 mismatch");
	}

	function testPackRefstr1()
		public
	{
		uint256[] memory x = new uint256[](1);
		uint256[] memory y = new uint256[](2);
		uint256[] memory z = new uint256[](2);

		_fillInputs(sha256("test1"), x);

		SnarkUtils.PackWords(x, y);

		z[0] = 3643975455434453609807585658478234095358500615880110310301135314775476073176;
		z[1] = 1;

		_testOutputs(y, z);
	}

	function testPackRefstr2()
		public
	{
		uint256[] memory x = new uint256[](2);
		uint256[] memory y = new uint256[](3);
		uint256[] memory z = new uint256[](3);

		_fillInputs(sha256("test2"), x);

		SnarkUtils.PackWords(x, y);

		z[0] = 4925142746083631591139372247064434013546145516121654587421428196413504490502;
		z[1] = 10453119659340003873222231724343495145051667962563095689507029569329753514034;
		z[2] = 18;

		_testOutputs(y, z);
	}

	function testPackRefstr20()
		public
	{
		uint256[] memory x = new uint256[](20);
		uint256[] memory y = new uint256[](21);
		uint256[] memory z = new uint256[](21);

		_fillInputs(sha256("test20"), x);

		SnarkUtils.PackWords(x, y);

		z[0] = 803262907995963344746616632441276499535724959171004080291855088204432750121;
		z[1] = 6426103263967706757972933059530211996285799673368032642334840705635462000973;
		z[2] = 7986792647748080779944345097983730525310153137329049623882131642116272392808;
		z[3] = 5998296563326548527769268279525890275846232765812114971328261132973614322499;
		z[4] = 4564339042618814938315026857949156761793617876881708255829495060821490965020;
		z[5] = 7566690031621470650627468611421277131031446848643525036771564484593645310179;
		z[6] = 2637475634313667493234256387026263121616582456327918274443723872792597661466;
		z[7] = 6625793919844815517927677970124116491273911567418275690617592981351640086740;
		z[8] = 9584317894764950859582304382734966485215048289730994010144149847845697078945;
		z[9] = 4304487384796984736926569431449789473426645901822599556492208777819870606603;
		z[10] = 5487876769046829039519809199426338824095671048170655442073274220580682442845;
		z[11] = 480980688381059032319354217152745147789124135750032021789599761678035927786;
		z[12] = 3847845507048472258554833737221961182312993086000256174316798093424287422291;
		z[13] = 1834741747058729212545923645603712495186448521591908384669988745416016968344;
		z[14] = 203922821805309272421016038743711479832840089530196572427711962338994541762;
		z[15] = 1631382574442474179368128309949691838662720716241572579421695698711956334097;
		z[16] = 13051060595539793434945026479597534709301765729932580635373565589695650672776;
		z[17] = 3090406681666676483935599954178358302802889257025151548463138710641216947264;
		z[18] = 10249242298668887443538426507340877940764365972996141882772911684140594373127;
		z[19] = 9623882616028477408575546428297081117821187367943782537522303468179048960057;
		z[20] = 728573888137036237;

		_testOutputs(y, z);
	}
}